// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "fabric8-jenkins-proxy-api": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/fabric8-services/fabric8-jenkins-proxy/internal/design
// --out=$(GOPATH)/src/github.com/fabric8-services/fabric8-jenkins-proxy/internal/api
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// ClearStatsContext provides the stats clear action context.
type ClearStatsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Namespace string
}

// NewClearStatsContext parses the incoming request URL and body, performs validations and creates the
// context used by the stats controller clear action.
func NewClearStatsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ClearStatsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ClearStatsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramNamespace := req.Params["namespace"]
	if len(paramNamespace) > 0 {
		rawNamespace := paramNamespace[0]
		rctx.Namespace = rawNamespace
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ClearStatsContext) OK(r *Stats) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.stats+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ClearStatsContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ClearStatsContext) Unauthorized(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ClearStatsContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// InfoStatsContext provides the stats info action context.
type InfoStatsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Namespace string
}

// NewInfoStatsContext parses the incoming request URL and body, performs validations and creates the
// context used by the stats controller info action.
func NewInfoStatsContext(ctx context.Context, r *http.Request, service *goa.Service) (*InfoStatsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := InfoStatsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramNamespace := req.Params["namespace"]
	if len(paramNamespace) > 0 {
		rawNamespace := paramNamespace[0]
		rctx.Namespace = rawNamespace
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *InfoStatsContext) OK(r *Stats) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.stats+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *InfoStatsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *InfoStatsContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}
